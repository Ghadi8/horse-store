/* Interfaces */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    0x00              // [0]
    calldataload      // [calldata (32)]

    // Cut down calldata into only the function selector

    // right shift 28 bytes => 224 bits => 0xe0

    0xe0             // [0xe0, calldata (32)]
    shr              // [function_selector]

    dup1             // [function_selector, function_selector]
    
    // if function_selector == updateHorseNumber(uint256) [0xcdfead2e] => jump to updateHorseNumber

    __FUNC_SIG(updateHorseNumber)       // [0xcdfead2e, function_selector, function_selector]
    eq               // [true_if_func_selector_matches, function_selector]

    updateJump       // [updateHorseNumberProgramCounter, true_if_func_selector_matches, function_selector]
    jumpi            // [function_selector]  

    // if function_selector == readNumberOfHorses() [0xe026c017] => jump to readNumberOfHorses

    __FUNC_SIG(readNumberOfHorses)       // [0xe026c017, function_selector]
    eq               // [true_if_func_selector_matches]
    
    readJump         // [readNumberOfHorsesProgramCounter, true_if_func_selector_matches]
    jumpi            // []

    0x00 0x00 revert

    updateJump:
        SET_NUMBER_OF_HORSES()
    readJump:
        GET_NUMBER_OF_HORSES()
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the value to store from calldata
    0x04              // [4]
    calldataload      // [value]

    // 2. Give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]   // [0, value]
  
    // 3. sstore opcode (consumes the key at the top of the stack and the value below it)
    sstore           // []
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
    // 1. Get the storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT]   // [0]
    // 2. Load the value from the storage slot to memory
    sload            // [value]
    0x00             // [0, value]
    mstore           // []          // Memory: [value]
    // 3. Return
    // 0x20 == 32 bytes
    0x20 0x00 return
}